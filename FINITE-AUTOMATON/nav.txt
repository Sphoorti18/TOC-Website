/****************************************************************************************************************/
DETERMINISTIC FINITE AUTOMATON (DFA)

Q ={ q0, q1, q2, q3 ... qf | q0 == initial state and qf == Final state }
δ ==> Q × Σ (Cartesian product) ==> { q0, q1, q2, q3 ... qf } x {a, b} ==> {(q0, a) , (q1, a), (q2, a), (q3, a)... (qf, a), (q0, b) , (q1, b), (q2, b), (q3, b)... (qf, b) }
==> Q == > { q0, q1, q2, q3 ... qf }
F ⊆ Q ==> Set of Final states

Transition graphs:
==> vertices represent states and the edges represent transitions.
Lemma : If M = (Q, Σ,δ,q0,F) is a DFA, then its associated transition graph G
has exactly |Q| vertices

*Extended transition function
δ* ==> Q × Σ* | Σ* == string (w)

//-----------------------------------------------------------------------------------------------------------------
L(M) = {w ∈ Σ* | δ(q0, a) ∈ F}

NON-DETERMINISTIC FINITE AUTOMATON (NFA)
Q ={ q0, q1, q2, q3 ... qf | q0 == initial state and qf == Final state }
δ ==> Q × {Σ U {λ}} (Cartesian product) ==> 2^Q
//------------------------------------------------------------------------------------------------------------------

###Conversion from nfa to dfa Algorithm
*SUBSET CONSTRUCTION
Step 1 => q0 of nfa == q0 of dfa 
Step 2 => Σ_nfa == Σ_dfa
Step 3 => |Q_dfa| = 2^|Q_nfa|
         Q_dfa = P(Q_nfa) ==> Power set of nfa
Step 4 => Identify the finals states in Q_dfa
Step 5 => Draw Transitions for Q_dfa

*LAZY EVALUATION METHOD
Step 1 => q0 of nfa == q0 of dfa 
Step 2 => Σ_nfa == Σ_dfa
Step 3 => Q_dfa = {q0}
/****************************************************************************************************************/
